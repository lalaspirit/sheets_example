%%%-------------------------------------------------------------------
%%% @SheetName 单位表
%%% @AutoGenerated sheets_generate
%%% @Version v0.1
%%% @SheetMd5 8f23892eb13978e00186242287b46a03
%%% @UpdateTime 2021-3-17 17:58:48
%%%-------------------------------------------------------------------
-module(sheet_unit).
-author("sheets_generate").

%%%===================================================================
%%% Mate
%%%===================================================================


%%%===================================================================
%%% API
%%%===================================================================
-export([init/0, reload/0, file/0, headers/0, record/0, add_record/2]).
-export([has/1, get/1, find/1, rfind/1, ets/0, list/0]).

%%%===================================================================
%%% Include
%%%===================================================================
-include("sheets_common.hrl").
-include("sheets_define.hrl").

%%%===================================================================
%%% Define
%%%===================================================================
-define(SHEET_FILE, "Unit.csv").
-define(SHEET_HEADERS, ["ID", "Name", h(type), h(level), h(sex), h(stats), h(equips), h(items), h(loots), h(element), h(extra), h(reserved)]).
-define(SHEET_RECORD, #sheet_unit{}).
-define(SHEET_RECORD_KEY, #sheet_unit.id).

%%%===================================================================
%%% Edit
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc init ets
%% @spec init() -> ok | error()
%%--------------------------------------------------------------------
init() ->
  ?new_set_ets(?MODULE, ?SHEET_RECORD_KEY),
  reload().

%%--------------------------------------------------------------------
%% @doc reload ets
%% @spec reload() -> ok | error()
%%--------------------------------------------------------------------
reload() -> ?reload_sheet(?MODULE).

%%--------------------------------------------------------------------
%% @doc file of sheet
%% @spec file() -> string()
%%--------------------------------------------------------------------
file() -> ?SHEET_FILE.

%%--------------------------------------------------------------------
%% @doc headers of sheet
%% @spec headers() -> [string()]
%%--------------------------------------------------------------------
headers() -> ?SHEET_HEADERS.

%%--------------------------------------------------------------------
%% @doc record of sheet
%% @spec record() -> #sheet_unit{}
%%--------------------------------------------------------------------
record() -> ?SHEET_RECORD.

%%--------------------------------------------------------------------
%% @doc add record to ets
%% @spec add_record(Ets, Fields) -> ok | error()
%%     Ets = atom(),
%%    Fields = [term()]
%%--------------------------------------------------------------------
add_record(Ets, Fields) ->
  Record = fill_record(record(), Fields),
  ets:insert(Ets, Record).


%%%===================================================================
%%% Query
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc has key in ets
%% @spec has(Key) -> true | false
%%--------------------------------------------------------------------
has(Key) -> ?has_record(?MODULE, Key).

%%--------------------------------------------------------------------
%% @doc get record in ets
%% @spec get(Key) -> #sheet_unit{} | error()
%%--------------------------------------------------------------------
get(Key) -> ?get_record(?MODULE, Key).

%%--------------------------------------------------------------------
%% @doc find record in ets, start from left
%% @spec find(Fun) -> {true, Ret} | false
%%   Fun = fun(#sheet_unit{} = Record) -> Ret end
%%   Ret = term()
%%--------------------------------------------------------------------
find(Fun) -> ?find_record(?MODULE, Fun).

%%--------------------------------------------------------------------
%% @doc find record in ets, start from right
%% @spec find(Fun) -> {true, Ret} | false
%%   Fun = fun(#sheet_unit{} = Record) -> Ret end
%%   Ret = term()
%%--------------------------------------------------------------------
rfind(Fun) -> ?rfind_record(?MODULE, Fun).

%%--------------------------------------------------------------------
%% @doc return ets name
%% @spec ets() -> atom()
%%--------------------------------------------------------------------
ets() -> ?sheet_ets(?MODULE).

%%--------------------------------------------------------------------
%% @doc return ets name
%% @spec list() -> [Record]
%%--------------------------------------------------------------------
list() -> ets:tab2list(ets()).


%%%===================================================================
%%% Header
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc get header define
%% @spec h(Name) -> Header
%%   Name = atom()
%%   Header = {function(), Arg} | {value, Value}
%%   Arg = Value = term()
%%--------------------------------------------------------------------
h(type) ->
  ?h_auto_ref(type);
h(level) ->
  ?h_auto_ref(level);
h(sex) ->
  ?h_auto_ref(sex);
h(stats) ->
  {fun h_map/3, stats};
h(equips) ->
  {fun h_list/3, equips};
h(items) ->
  {fun h_prop/3, items};
h(loots) ->
  {fun h_prop/3, loots};
h(element) ->
  ?h_auto_ref(element);
h(extra) ->
  ?h_auto_ref(extra);
h(reserved) ->
  {value, undefined}.

%%--------------------------------------------------------------------
%% @doc h_map field
%% @spec h_map(Name, Cols, Values) -> [{Key, Value}]
%%   Name = atom(), Key = string(), Cols = [string()]
%%   Values = [Value]
%%   Value = term()
%%--------------------------------------------------------------------
h_map(stats, Cols, Values) -> ?h_map(stats, "Stat (\\w+)", Cols, Values).

%%--------------------------------------------------------------------
%% @doc h_list field
%% @spec h_list(Name, Cols, Values) -> [Value]
%%   Name = atom(), Cols = [string()]
%%   Values = [Value]
%%   Value = term()
%%--------------------------------------------------------------------
h_list(equips, Cols, Values) -> ?h_list(equips, "Equip \\d+", Cols, Values).

%%--------------------------------------------------------------------
%% @doc h_prop field
%% @spec h_prop(Name, Cols, Values) -> [tuple()]
%%   Name = atom(), Key = term(), Cols = [string()]
%%   Values = [Value]
%%   Value = term()
%%--------------------------------------------------------------------
h_prop(items, Cols, Values) -> ?h_prop(items, ["Item ID (\\d+)", "Item Amount (\\d+)"], Cols, Values);
h_prop(loots, Cols, Values) -> ?h_prop(loots, ["Loot Type (\\d+)", "Loot ID (\\d+)", "Loot Amount (\\d+)"], Cols, Values).


%%%===================================================================
%%% Field
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc setup fields of record
%% @spec fill_record(Record, Columns) -> NewRecord
%%   Record = NewRecord = #sheet_unit{}
%%   Columns = [term()]
%%--------------------------------------------------------------------
fill_record(Record, [F_id, F_name, F_type, F_level, F_sex, F_stats, F_equips, F_items, F_loots, F_element, F_extra, _F_reserved]) ->
  Record#sheet_unit{
    id = F_id,
    name = F_name,
    type = f(type, F_type),
    level = f(level, F_level),
    sex = f(sex, F_sex),
    stats = f(stats, F_stats),
    equips = f(equips, F_equips),
    items = f(items, F_items),
    loots = f(loots, F_loots),
    element = f(element, F_element),
    extra = f(extra, F_extra)
  }.

%%--------------------------------------------------------------------
%% @doc get field value
%% @spec f(Name, ParsedValue) -> Value
%%   Name = atom()
%%   ParsedValue = Value = term()
%%--------------------------------------------------------------------
f(type, F_type) ->
  ?f_cast(type, ?to_atom, ?f_enum(type, ["Hero", "Npc"], F_type));
f(level, F_level) ->
  ?default(?f_check(level, fun(Level) -> Level < 1000 end, F_level), 1);
f(sex, F_sex) ->
  ?default(?f_enum(sex, [0, 1], F_sex), 0);
f(stats, F_stats) ->
  ?default([{
    ?f_cast(stats, ?to_atom, ?f_enum(stats, ["Power", "Health", "Armor"], _Key)),
    _Value
    } || {_Key, _Value} = _Pair <- F_stats], []);
f(equips, F_equips) ->
  ?default(F_equips, []);
f(items, F_items) ->
  ?default([_Pair || _Pair <- F_items, ?f_filter(items, fun({ID, Amount}) -> ID > 0 andalso Amount > 0 end, _Pair)], []);
f(loots, F_loots) ->
  ?default([begin 
    _Key = element(1, _Pair),
    _Key2 = ?f_cast(loots, ?to_atom, _Key),
    _Pair2 = erlang:setelement(1, _Pair, _Key2),
    _Pair2
    end || _Pair <- F_loots, ?f_filter(loots, fun({_, _, Amount}) -> Amount > 0 end, _Pair)], []);
f(element, F_element) ->
  ?default(F_element, {fire,water});
f(extra, F_extra) ->
  ?default(F_extra, [{checkable,true}]).


%%%===================================================================
%%% Custom
%%%===================================================================

