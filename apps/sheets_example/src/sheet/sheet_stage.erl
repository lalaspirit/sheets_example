%%%-------------------------------------------------------------------
%%% @SheetName 关卡表
%%% @AutoGenerated sheets_generate
%%% @Version v0.1
%%% @SheetMd5 b2c748412d2691c08ef840f74ba5a30a
%%% @UpdateTime 2021-3-17 17:58:48
%%%-------------------------------------------------------------------
-module(sheet_stage).
-author("sheets_generate").

%%%===================================================================
%%% Mate
%%%===================================================================


%%%===================================================================
%%% API
%%%===================================================================
-export([init/0, reload/0, file/0, headers/0, record/0, add_record/2]).
-export([has/1, get/1, find/1, rfind/1, ets/0, list/0]).

%%%===================================================================
%%% Include
%%%===================================================================
-include("sheets_common.hrl").
-include("sheets_define.hrl").

%%%===================================================================
%%% Define
%%%===================================================================
-define(SHEET_FILE, "Stage.csv").
-define(SHEET_HEADERS, ["ID", "Name", h(chapter), h(difficulty), h(level), h(loots), h(reserved)]).
-define(SHEET_RECORD, #sheet_stage{}).
-define(SHEET_RECORD_KEY, #sheet_stage.id).

%%%===================================================================
%%% Edit
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc init ets
%% @spec init() -> ok | error()
%%--------------------------------------------------------------------
init() ->
  ?new_set_ets(?MODULE, ?SHEET_RECORD_KEY),
  reload().

%%--------------------------------------------------------------------
%% @doc reload ets
%% @spec reload() -> ok | error()
%%--------------------------------------------------------------------
reload() -> ?reload_sheet(?MODULE).

%%--------------------------------------------------------------------
%% @doc file of sheet
%% @spec file() -> string()
%%--------------------------------------------------------------------
file() -> ?SHEET_FILE.

%%--------------------------------------------------------------------
%% @doc headers of sheet
%% @spec headers() -> [string()]
%%--------------------------------------------------------------------
headers() -> ?SHEET_HEADERS.

%%--------------------------------------------------------------------
%% @doc record of sheet
%% @spec record() -> #sheet_stage{}
%%--------------------------------------------------------------------
record() -> ?SHEET_RECORD.

%%--------------------------------------------------------------------
%% @doc add record to ets
%% @spec add_record(Ets, Fields) -> ok | error()
%%     Ets = atom(),
%%    Fields = [term()]
%%--------------------------------------------------------------------
add_record(Ets, Fields) ->
  Record = fill_record(record(), Fields),
  ets:insert(Ets, Record).


%%%===================================================================
%%% Query
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc has key in ets
%% @spec has(Key) -> true | false
%%--------------------------------------------------------------------
has(Key) -> ?has_record(?MODULE, Key).

%%--------------------------------------------------------------------
%% @doc get record in ets
%% @spec get(Key) -> #sheet_stage{} | error()
%%--------------------------------------------------------------------
get(Key) -> ?get_record(?MODULE, Key).

%%--------------------------------------------------------------------
%% @doc find record in ets, start from left
%% @spec find(Fun) -> {true, Ret} | false
%%   Fun = fun(#sheet_stage{} = Record) -> Ret end
%%   Ret = term()
%%--------------------------------------------------------------------
find(Fun) -> ?find_record(?MODULE, Fun).

%%--------------------------------------------------------------------
%% @doc find record in ets, start from right
%% @spec find(Fun) -> {true, Ret} | false
%%   Fun = fun(#sheet_stage{} = Record) -> Ret end
%%   Ret = term()
%%--------------------------------------------------------------------
rfind(Fun) -> ?rfind_record(?MODULE, Fun).

%%--------------------------------------------------------------------
%% @doc return ets name
%% @spec ets() -> atom()
%%--------------------------------------------------------------------
ets() -> ?sheet_ets(?MODULE).

%%--------------------------------------------------------------------
%% @doc return ets name
%% @spec list() -> [Record]
%%--------------------------------------------------------------------
list() -> ets:tab2list(ets()).


%%%===================================================================
%%% Header
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc get header define
%% @spec h(Name) -> Header
%%   Name = atom()
%%   Header = {function(), Arg} | {value, Value}
%%   Arg = Value = term()
%%--------------------------------------------------------------------
h(chapter) ->
  ?h_auto_ref(chapter);
h(difficulty) ->
  ?h_auto_ref(difficulty);
h(level) ->
  ?h_auto_ref(level);
h(loots) ->
  {fun h_prop/3, loots};
h(reserved) ->
  {value, undefined}.

%%--------------------------------------------------------------------
%% @doc h_prop field
%% @spec h_prop(Name, Cols, Values) -> [tuple()]
%%   Name = atom(), Key = term(), Cols = [string()]
%%   Values = [Value]
%%   Value = term()
%%--------------------------------------------------------------------
h_prop(loots, Cols, Values) -> ?h_prop(loots, ["Loot Type (\\d+)", "Loot ID (\\d+)", "Loot Amount (\\d+)"], Cols, Values).


%%%===================================================================
%%% Field
%%%===================================================================
%%--------------------------------------------------------------------
%% @doc setup fields of record
%% @spec fill_record(Record, Columns) -> NewRecord
%%   Record = NewRecord = #sheet_stage{}
%%   Columns = [term()]
%%--------------------------------------------------------------------
fill_record(Record, [F_id, F_name, F_chapter, F_difficulty, F_level, F_loots, _F_reserved]) ->
  Record#sheet_stage{
    id = F_id,
    name = F_name,
    chapter = F_chapter,
    difficulty = f(difficulty, F_difficulty),
    level = f(level, F_level),
    loots = f(loots, F_loots)
  }.

%%--------------------------------------------------------------------
%% @doc get field value
%% @spec f(Name, ParsedValue) -> Value
%%   Name = atom()
%%   ParsedValue = Value = term()
%%--------------------------------------------------------------------
f(difficulty, F_difficulty) ->
  ?default(F_difficulty, 1);
f(level, F_level) ->
  ?default(?f_check(level, fun(Level) -> Level < 1000 end, F_level), 1);
f(loots, F_loots) ->
  ?default([begin 
    _Key = element(1, _Pair),
    _Key2 = ?f_cast(loots, ?to_atom, _Key),
    _Pair2 = erlang:setelement(1, _Pair, _Key2),
    _Pair2
    end || _Pair <- F_loots, ?f_filter(loots, fun({_, _, Amount}) -> Amount > 0 end, _Pair)], []).


%%%===================================================================
%%% Custom
%%%===================================================================

